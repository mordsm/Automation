# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestUntitled():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_untitled(self):
    # Test name: Untitled
    # Step # | name | target | value
    # 1 | open | /he | 
    self.driver.get("https://www.bankhapoalim.co.il/he")
    # 2 | setWindowSize | 1853x1025 | 
    self.driver.set_window_size(1853, 1025)
    # 3 | click | css=.login-button > .desktop | 
    self.driver.find_element(By.CSS_SELECTOR, ".login-button > .desktop").click()
    # 4 | selectFrame | index=0 | 
    self.driver.getAttribute("linkText");    self.driver.switch_to.frame(0)
    # 5 | click | id=userCode | 
    self.driver.find_element(By.ID, "userCode").click()
    # 6 | type | id=userCode | vn02727
    self.driver.find_element(By.ID, "userCode").send_keys("vn02727")
    # 7 | click | id=password | 
    self.driver.find_element(By.ID, "password").click()
    # 8 | type | id=password | mordsmi8
    self.driver.find_element(By.ID, "password").send_keys("mordsmi8")
    # 9 | click | css=.red-coloring-btn | 
    self.driver.find_element(By.CSS_SELECTOR, ".red-coloring-btn").click()
    # 10 | selectFrame | relative=parent | 
    self.driver.switch_to.default_content()
    # 11 | click | id=rb-accounts-filter-0 | 
    self.driver.find_element(By.ID, "rb-accounts-filter-0").click()
    # 12 | click | css=.account-item:nth-child(3) > label | 
    self.driver.find_element(By.CSS_SELECTOR, ".account-item:nth-child(3) > label").click()
    # 13 | mouseOver | id=mega-menu-1 | 
    element = self.driver.find_element(By.ID, "mega-menu-1")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 14 | mouseOut | id=mega-menu-1 | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 15 | mouseOver | id=mega-menu-0 | 
    element = self.driver.find_element(By.ID, "mega-menu-0")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 16 | mouseOut | id=mega-menu-0 | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 17 | mouseOver | id=mega-menu-1 | 
    element = self.driver.find_element(By.ID, "mega-menu-1")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 18 | mouseOut | id=mega-menu-1 | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 19 | mouseOver | id=mega-menu-2 | 
    element = self.driver.find_element(By.ID, "mega-menu-2")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 20 | mouseOut | id=mega-menu-2 | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 21 | click | css=poalim-header-footer-layout | 
    self.driver.find_element(By.CSS_SELECTOR, "poalim-header-footer-layout").click()
    # 22 | mouseOver | id=mega-menu-1 | 
    element = self.driver.find_element(By.ID, "mega-menu-1")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 23 | click | id=mega-menu-1 | 
    self.driver.find_element(By.ID, "mega-menu-1").click()
    # 24 | click | id=mega-menu-1 | 
    self.driver.find_element(By.ID, "mega-menu-1").click()
    # 25 | click | id=mega-menu-1 | 
    self.driver.find_element(By.ID, "mega-menu-1").click()
    # 26 | doubleClick | id=mega-menu-1 | 
    element = self.driver.find_element(By.ID, "mega-menu-1")
    actions = ActionChains(self.driver)
    actions.double_click(element).perform()
    # 27 | mouseOut | id=mega-menu-1 | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 28 | click | id=period-filter-button-0 | 
    self.driver.find_element(By.ID, "period-filter-button-0").click()
    # 29 | click | css=.divider:nth-child(5) > label | 
    self.driver.find_element(By.CSS_SELECTOR, ".divider:nth-child(5) > label").click()
    # 30 | click | css=.dropdown-footer:nth-child(7) > .btn3 | 
    self.driver.find_element(By.CSS_SELECTOR, ".dropdown-footer:nth-child(7) > .btn3").click()
    # 31 | click | css=.icon-excel | 
    self.vars["window_handles"] = self.driver.window_handles
    # 32 | storeWindowHandle | root | 
    self.driver.find_element(By.CSS_SELECTOR, ".icon-excel").click()
    # 33 | selectWindow | handle=${win8704} | 
    self.vars["win8704"] = self.wait_for_window(2000)
    # 34 | close |  | 
    self.vars["root"] = self.driver.current_window_handle
    # 35 | selectWindow | handle=${root} | 
    self.driver.switch_to.window(self.vars["win8704"])
    # 36 | click | css=poalim-export-navigation | 
    self.driver.close()
    # 37 | click | css=poalim-export-navigation | 
    self.driver.switch_to.window(self.vars["root"])
    # 38 | doubleClick | css=poalim-export-navigation | 
    self.driver.find_element(By.CSS_SELECTOR, "poalim-export-navigation").click()
    self.driver.find_element(By.CSS_SELECTOR, "poalim-export-navigation").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "poalim-export-navigation")
    actions = ActionChains(self.driver)
    actions.double_click(element).perform()
  
